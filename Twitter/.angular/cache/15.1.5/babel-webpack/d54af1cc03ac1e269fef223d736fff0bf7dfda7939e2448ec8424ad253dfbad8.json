{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TokenService {\n  constructor() {\n    this.iss = {\n      login: 'http://127.0.0.1:8000/api/auth/login',\n      signup: 'http://127.0.0.1:8000/api/auth/signup'\n    };\n  }\n  handel(token) {\n    this.set(token);\n    console.log(this.isValid());\n  }\n  set(token) {\n    sessionStorage.setItem('token', token);\n  }\n  get() {\n    return localStorage.getItem('token');\n  }\n  remove() {\n    localStorage.removeItem('token');\n  }\n  // check token and return true or false \n  isValid() {\n    const token = this.get();\n    if (token) {\n      const payload = this.payload(token);\n      if (payload) {\n        return Object.values(this.iss).indexOf(payload.iss) > -1 ? true : false;\n      }\n    }\n    return false;\n  }\n  payload(token) {\n    const payload = token.split('.')[1];\n    return this.decode(payload);\n  }\n  decode(payload) {\n    return JSON.parse(atob(payload));\n  }\n  loggedIn() {\n    return this.isValid();\n  }\n}\nTokenService.ɵfac = function TokenService_Factory(t) {\n  return new (t || TokenService)();\n};\nTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenService,\n  factory: TokenService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,YAAY;EAKvBC;IAJM,QAAG,GAAG;MACdC,KAAK,EAAE,sCAAsC;MAC7CC,MAAM,EAAE;KACP;EACiB;EAChBC,MAAM,CAACC,KAAU;IAChB,IAAI,CAACC,GAAG,CAACD,KAAK,CAAC;IACfE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,OAAO,EAAE,CAAC;EAC5B;EAEAH,GAAG,CAACD,KAAU;IACbK,cAAc,CAACC,OAAO,CAAC,OAAO,EAACN,KAAK,CAAC;EACtC;EAEAO,GAAG;IACF,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACrC;EAEAC,MAAM;IACJF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;EAClC;EACF;EACAP,OAAO;IACL,MAAMJ,KAAK,GAAG,IAAI,CAACO,GAAG,EAAE;IACxB,IAAGP,KAAK,EAAC;MACP,MAAMY,OAAO,GAAG,IAAI,CAACA,OAAO,CAACZ,KAAK,CAAC;MACnC,IAAGY,OAAO,EAAC;QACX,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACC,GAAG,CAAC,CAACC,OAAO,CAACJ,OAAO,CAACG,GAAG,CAAC,GAAC,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK;;;IAGvE,OAAO,KAAK;EACd;EAEAH,OAAO,CAACZ,KAAU;IAClB,MAAMY,OAAO,GAAEZ,KAAK,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClC,OAAO,IAAI,CAACC,MAAM,CAACN,OAAO,CAAC;EAC3B;EAEAM,MAAM,CAACN,OAAY;IACnB,OAAOO,IAAI,CAACC,KAAK,CAACC,IAAI,CAACT,OAAO,CAAC,CAAC;EAChC;EACAU,QAAQ;IACN,OAAO,IAAI,CAAClB,OAAO,EAAE;EACvB;;AA5CaT,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA4B,SAAZ5B,YAAY;EAAA6B,YAHX;AAAM","names":["TokenService","constructor","login","signup","handel","token","set","console","log","isValid","sessionStorage","setItem","get","localStorage","getItem","remove","removeItem","payload","Object","values","iss","indexOf","split","decode","JSON","parse","atob","loggedIn","factory","providedIn"],"sourceRoot":"","sources":["D:\\fullstack-php\\finalProject\\Twitter\\Twitter\\src\\app\\Services\\token.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TokenService {\nprivate iss = {\nlogin: 'http://127.0.0.1:8000/api/auth/login',\nsignup: 'http://127.0.0.1:8000/api/auth/signup'\n};\n  constructor() { }\n  handel(token: any){\n   this.set(token)\n   console.log(this.isValid())\n  }\n\n  set(token: any){\n   sessionStorage.setItem('token',token);\n  }\n\n  get(){\n   return localStorage.getItem('token');\n  }\n\n  remove(){\n    localStorage.removeItem('token');\n  }\n// check token and return true or false \nisValid(){\n  const token = this.get();\n  if(token){\n    const payload = this.payload(token);\n    if(payload){\n    return Object.values(this.iss).indexOf(payload.iss)>-1 ? true : false;\n    }\n  }\n  return false;\n}\n\npayload(token: any){\nconst payload= token.split('.')[1];\nreturn this.decode(payload);\n}\n\ndecode(payload: any){\nreturn JSON.parse(atob(payload));\n}\nloggedIn(){\n  return this.isValid();\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}