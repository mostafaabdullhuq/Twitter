{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TokenService {\n  constructor() {}\n  handel(token) {\n    this.set(token);\n    console.log;\n  }\n  set(token) {\n    localStorage.setItem('token', token);\n  }\n  get() {\n    return localStorage.getItem('token');\n  }\n  remove() {\n    localStorage.removeItem('token');\n  }\n  isValid() {\n    const token = this.get();\n    if (token) {\n      const payload = this.payload(token);\n    }\n  }\n  payload(token) {\n    return token.split('.')[1];\n  }\n}\nTokenService.ɵfac = function TokenService_Factory(t) {\n  return new (t || TokenService)();\n};\nTokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenService,\n  factory: TokenService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,YAAY;EAEvBC,eAAgB;EAChBC,MAAM,CAACC,KAAU;IAChB,IAAI,CAACC,GAAG,CAACD,KAAK,CAAC;IACfE,OAAO,CAACC,GAAG;EACZ;EACAF,GAAG,CAACD,KAAU;IACbI,YAAY,CAACC,OAAO,CAAC,OAAO,EAACL,KAAK,CAAC;EACpC;EACAM,GAAG;IACF,OAAOF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACrC;EACAC,MAAM;IACJJ,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAClC;EACAC,OAAO;IACL,MAAMV,KAAK,GAAG,IAAI,CAACM,GAAG,EAAE;IACxB,IAAGN,KAAK,EAAC;MACP,MAAMW,OAAO,GAAG,IAAI,CAACA,OAAO,CAACX,KAAK,CAAC;;EAEzC;EACAW,OAAO,CAACX,KAAU;IAClB,OAAOA,KAAK,CAACY,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1B;;AAxBaf,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgB,SAAZhB,YAAY;EAAAiB,YAFX;AAAM","names":["TokenService","constructor","handel","token","set","console","log","localStorage","setItem","get","getItem","remove","removeItem","isValid","payload","split","factory","providedIn"],"sourceRoot":"","sources":["D:\\fullstack-php\\finalProject\\Twitter\\Twitter\\src\\app\\Services\\token.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenService {\n\n  constructor() { }\n  handel(token: any){\n   this.set(token)\n   console.log\n  }\n  set(token: any){\n   localStorage.setItem('token',token);\n  }\n  get(){\n   return localStorage.getItem('token');\n  }\n  remove(){\n    localStorage.removeItem('token');\n  }\n  isValid(){\n    const token = this.get();\n    if(token){\n      const payload = this.payload(token);\n  }\n}\npayload(token: any){\nreturn token.split('.')[1];\n}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}