{"ast":null,"code":"import { getXHRResponse } from './getXHRResponse';\nexport class AjaxResponse {\n  constructor(originalEvent, xhr, request, type = 'download_load') {\n    this.originalEvent = originalEvent;\n    this.xhr = xhr;\n    this.request = request;\n    this.type = type;\n    const {\n      status,\n      responseType\n    } = xhr;\n    this.status = status !== null && status !== void 0 ? status : 0;\n    this.responseType = responseType !== null && responseType !== void 0 ? responseType : '';\n    const allHeaders = xhr.getAllResponseHeaders();\n    this.responseHeaders = allHeaders ? allHeaders.split('\\n').reduce((headers, line) => {\n      const index = line.indexOf(': ');\n      headers[line.slice(0, index)] = line.slice(index + 2);\n      return headers;\n    }, {}) : {};\n    this.response = getXHRResponse(xhr);\n    const {\n      loaded,\n      total\n    } = originalEvent;\n    this.loaded = loaded;\n    this.total = total;\n  }\n}","map":{"version":3,"names":["getXHRResponse","AjaxResponse","constructor","originalEvent","xhr","request","type","status","responseType","allHeaders","getAllResponseHeaders","responseHeaders","split","reduce","headers","line","index","indexOf","slice","response","loaded","total"],"sources":["D:/fullstack-php/finalProject/Twitter/Twitter/node_modules/rxjs/dist/esm/internal/ajax/AjaxResponse.js"],"sourcesContent":["import { getXHRResponse } from './getXHRResponse';\nexport class AjaxResponse {\n    constructor(originalEvent, xhr, request, type = 'download_load') {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.type = type;\n        const { status, responseType } = xhr;\n        this.status = status !== null && status !== void 0 ? status : 0;\n        this.responseType = responseType !== null && responseType !== void 0 ? responseType : '';\n        const allHeaders = xhr.getAllResponseHeaders();\n        this.responseHeaders = allHeaders\n            ?\n                allHeaders.split('\\n').reduce((headers, line) => {\n                    const index = line.indexOf(': ');\n                    headers[line.slice(0, index)] = line.slice(index + 2);\n                    return headers;\n                }, {})\n            : {};\n        this.response = getXHRResponse(xhr);\n        const { loaded, total } = originalEvent;\n        this.loaded = loaded;\n        this.total = total;\n    }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAO,MAAMC,YAAY,CAAC;EACtBC,WAAW,CAACC,aAAa,EAAEC,GAAG,EAAEC,OAAO,EAAEC,IAAI,GAAG,eAAe,EAAE;IAC7D,IAAI,CAACH,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,MAAM;MAAEC,MAAM;MAAEC;IAAa,CAAC,GAAGJ,GAAG;IACpC,IAAI,CAACG,MAAM,GAAGA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAGA,MAAM,GAAG,CAAC;IAC/D,IAAI,CAACC,YAAY,GAAGA,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAGA,YAAY,GAAG,EAAE;IACxF,MAAMC,UAAU,GAAGL,GAAG,CAACM,qBAAqB,EAAE;IAC9C,IAAI,CAACC,eAAe,GAAGF,UAAU,GAEzBA,UAAU,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAAC,CAACC,OAAO,EAAEC,IAAI,KAAK;MAC7C,MAAMC,KAAK,GAAGD,IAAI,CAACE,OAAO,CAAC,IAAI,CAAC;MAChCH,OAAO,CAACC,IAAI,CAACG,KAAK,CAAC,CAAC,EAAEF,KAAK,CAAC,CAAC,GAAGD,IAAI,CAACG,KAAK,CAACF,KAAK,GAAG,CAAC,CAAC;MACrD,OAAOF,OAAO;IAClB,CAAC,EAAE,CAAC,CAAC,CAAC,GACR,CAAC,CAAC;IACR,IAAI,CAACK,QAAQ,GAAGnB,cAAc,CAACI,GAAG,CAAC;IACnC,MAAM;MAAEgB,MAAM;MAAEC;IAAM,CAAC,GAAGlB,aAAa;IACvC,IAAI,CAACiB,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}