{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class HumanNumbersPipe {\n  transform(input, args) {\n    var exp,\n      rounded,\n      suffixes = ['k', 'M', 'B', 'T', 'P', 'E'];\n    if (Number.isNaN(input)) {\n      return null;\n    }\n    if (input < 1000) {\n      return input;\n    }\n    exp = Math.floor(Math.log(input) / Math.log(1000));\n    return (input / Math.pow(1000, exp)).toFixed(args) + suffixes[exp - 1];\n  }\n}\nHumanNumbersPipe.ɵfac = function HumanNumbersPipe_Factory(t) {\n  return new (t || HumanNumbersPipe)();\n};\nHumanNumbersPipe.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"humanNumbers\",\n  type: HumanNumbersPipe,\n  pure: true\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,gBAAgB;EAC3BC,SAAS,CAACC,KAAU,EAAEC,IAAU;IAC9B,IAAIC,GAAG;MACLC,OAAO;MACPC,QAAQ,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAE3C,IAAIC,MAAM,CAACC,KAAK,CAACN,KAAK,CAAC,EAAE;MACvB,OAAO,IAAI;;IAGb,IAAIA,KAAK,GAAG,IAAI,EAAE;MAChB,OAAOA,KAAK;;IAGdE,GAAG,GAAGK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACT,KAAK,CAAC,GAAGO,IAAI,CAACE,GAAG,CAAC,IAAI,CAAC,CAAC;IAElD,OAAO,CAACT,KAAK,GAAGO,IAAI,CAACG,GAAG,CAAC,IAAI,EAAER,GAAG,CAAC,EAAES,OAAO,CAACV,IAAI,CAAC,GAAGG,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;EACxE;;AAjBWJ,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;;QAAhBA,gBAAgB;EAAAc;AAAA","names":["HumanNumbersPipe","transform","input","args","exp","rounded","suffixes","Number","isNaN","Math","floor","log","pow","toFixed","pure"],"sourceRoot":"","sources":["D:\\fullstack-php\\finalProject\\Twitter\\Twitter\\src\\app\\Pipes\\human-numbers.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'humanNumbers',\r\n})\r\nexport class HumanNumbersPipe implements PipeTransform {\r\n  transform(input: any, args?: any): any {\r\n    var exp,\r\n      rounded,\r\n      suffixes = ['k', 'M', 'B', 'T', 'P', 'E'];\r\n\r\n    if (Number.isNaN(input)) {\r\n      return null;\r\n    }\r\n\r\n    if (input < 1000) {\r\n      return input;\r\n    }\r\n\r\n    exp = Math.floor(Math.log(input) / Math.log(1000));\r\n\r\n    return (input / Math.pow(1000, exp)).toFixed(args) + suffixes[exp - 1];\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}